"""MIT License

Copyright (c) 2023 pyvscode

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""




# Изменение функции print
def напиши(*args, разделитель=' ', конец_строки='\n'):
    """
    Функция для вывода текста на экран с дополнительными параметрами.

    Параметры:
    - *args: Неопределенное количество аргументов для вывода.
    - разделитель: Строка, которая будет использоваться в качестве разделителя между элементами. По умолчанию - пробел.
    - конец_строки: Строка, которая будет добавлена в конец каждой строки вывода. По умолчанию - символ новой строки.

    Примеры использования:
    - напиши("Привет", "мир!")
        Выводит на экран текст "Привет мир!".

    - напиши("Я", "учусь", "программированию", разделитель=' | ', конец_строки='!')
        Выводит на экран текст "Я | учусь | программированию!".

    Возвращает:
    Ничего. Функция просто выводит текст на экран.
    """
    текст = разделитель.join(map(str, args))
    print(текст, end=конец_строки)

# Изменение функции input
def спросить(текст='Введите значение: ', значение_по_умолчанию=None, тип_ввода=str, макс_попыток=3):
    """
    Функция для запроса ввода от пользователя с дополнительными параметрами.

    Параметры:
    - текст: Текстовая строка, отображаемая перед запросом ввода. По умолчанию - 'Введите значение: '.
    - значение_по_умолчанию: Значение, которое будет возвращено, если пользователь ничего не введет. По умолчанию - None.
    - тип_ввода: Тип данных, к которому будет приведено введенное значение. По умолчанию - str.
    - макс_попыток: Максимальное количество попыток ввода. По умолчанию - 3.

    Примеры использования:
    1. спросить()
        Запрашивает ввод от пользователя с текстом "Введите значение: ".

    2. спросить("Как вас зовут? ", значение_по_умолчанию="Гость")
        Отображает текст "Как вас зовут? " и возвращает "Гость", если пользователь не вводит ничего.

    3. спросить("Сколько вам лет? ", тип_ввода=int)
        Запрашивает ввод числа и возвращает его, преобразованное к целому числу.

    4. спросить("Введите пароль: ", макс_попыток=2)
        Запрашивает ввод пароля, ограничивая максимальное количество попыток ввода до 2.

    Возвращает:
    Введенное и преобразованное значение или значение_по_умолчанию, если пользователь не ввел ничего.
    """
    for попытка in range(1, макс_попыток + 1):
        try:
            ввод = input(текст)
            if not ввод:
                return значение_по_умолчанию
            return тип_ввода(ввод)
        except ValueError:
            print(f"Некорректный ввод. Пожалуйста, введите значение типа {тип_ввода}.")

    print(f"Достигнуто максимальное количество попыток ({макс_попыток}). Возвращено значение по умолчанию.")
    return значение_по_умолчанию

# Изменение проверки if
def проверка(условие, действие, иначе, индействие=None):
    """
    Функция для условной проверки и выполнения действий в зависимости от результата условия.

    Пример использования:
    1 - проверка(11 >= 11, lambda: напиши("Да"))
    2 - проверка(11 == 11, lambda: напиши("bam"), "да", lambda: напиши("bim"))

    Параметры:
    - условие: Булево значение, результат проверки.
    - действие: Функция, которая будет выполнена, если условие истинно.
    - иначе: Строка, определяющая альтернативное действие в случае ложного условия. 
    - индействие: Функция, которая будет выполнена, если условие ложно. По умолчанию None.

    Примеры:
    1. проверка(10 > 5, lambda: print("10 больше 5"), "нет", lambda: print("10 не больше 5"))
    2. проверка(5 == 5, lambda: print("5 равно 5"), "да", lambda: print("5 не равно 5"))
    """
    иначе = иначе.lower()  # Приведем значение к нижнему регистру для удобства сравнения
    if иначе == "да":
        if условие:
            действие()
        else:
            if индействие is not None and callable(индействие):
                индействие()
            else:
                print("Условие не выполнено, и индействие не определено или не является вызываемым объектом.")
            return
    elif иначе == "нет":
        if условие:
            действие()
            return
        else:
            print("Условие не выполнено, и 'нет' выбрано.")
            return
    else:
        raise ValueError("Некорректное значение для параметра 'иначе'")


def оценка(выражение, словарьдва=None, словарь=None):
    """Функция Eval"""
    if словарьдва and словарь:
        return eval(выражение, globals=словарьдва, locals=словарь)
    elif словарь:
        return eval(выражение, locals=словарь)
    elif словарьдва:
        return eval(выражение, globals=словарьдва)
    elif словарьдва is None and словарь is None:
        return eval(выражение)
    else:
        print("[RuPython Error] Повторите еще раз...")
        return None

def количество(a):
    """
    Функция количество() в Python используется для определения количества элементов в объекте, таком как строка, список, кортеж, словарь и др. Эта функция принимает один аргумент и возвращает целочисленное значение, представляющее количество элементов в переданном объекте.
    # Примеры:
    string_length = len("Hello, World!")
    # Результат: 13

    list_length = len([1, 2, 3, 4, 5])
    # Результат: 5

    tuple_length = len((10, 20, 30))
    # Результат: 3

    dictionary_length = len({"apple": 3, "banana": 2, "orange": 5})
    # Результат: 3 (количество ключей в словаре)
    """
    return len(a)

def модуль(a):
    """Функция модуль() в Python используется для получения абсолютного значения числа. Абсолютное значение числа — это его расстояние до нуля на числовой оси, независимо от направления. Функция модуль() принимает один аргумент и возвращает его абсолютное значение.
    # Примеры:
    result1 = abs(-5)
    # Результат: 5

    result2 = abs(3.14)
    # Результат: 3.14

    result3 = abs(-7.5)
    # Результат: 7.5
    """
    return abs(a)

def вывести_диапазон(начало, конец, шаг=1, разделитель=' ', конец_строки='\n'):
    """
    Функция для вывода элементов диапазона с дополнительными параметрами.

    Параметры:
    - начало: Начальное значение диапазона.
    - конец: Конечное значение диапазона.
    - шаг: Шаг между значениями в диапазоне. По умолчанию - 1.
    - разделитель: Строка, которая будет использоваться в качестве разделителя между элементами. По умолчанию - пробел.
    - конец_строки: Строка, которая будет добавлена в конец каждой строки вывода. По умолчанию - символ новой строки.

    Примеры использования:
    - вывести_диапазон(1, 5)
        Выводит на экран: "1 2 3 4 5\n".

    - вывести_диапазон(10, 0, -2, разделитель=' -> ', конец_строки='!')
        Выводит на экран: "10 -> 8 -> 6 -> 4 -> 2 -> 0!".

    - вывести_диапазон(0, 10, 2, разделитель=', ')
        Выводит на экран: "0, 2, 4, 6, 8, 10\n".

    Возвращает:
    Ничего. Функция просто выводит текст на экран.
    """
    диапазон_элементы = range(начало, конец + 1, шаг)
    текст = разделитель.join(map(str, диапазон_элементы))
    print(текст, end=конец_строки)

def информация_из_файла(путь_к_файлу, режим='r', разделитель='\n', конец_строки='\n'):
    """
    Функция для чтения информации из файла с выводом дополнительных параметров.

    Параметры:
    - путь_к_файлу: Путь к файлу, который нужно прочитать.
    - режим: Режим открытия файла. По умолчанию - 'r' (чтение).
    - разделитель: Строка, которая будет использоваться в качестве разделителя между элементами. По умолчанию - символ новой строки.
    - конец_строки: Строка, которая будет добавлена в конец каждой строки вывода. По умолчанию - символ новой строки.

    Примеры использования:
    - информация_из_файла("example.txt")
        Выводит содержимое файла "example.txt" и его тип данных.

    - информация_из_файла("example.csv", разделитель=', ', конец_строки='!')
        Выводит содержимое файла "example.csv" с разделением по запятой и добавляет восклицательный знак в конце каждой строки.

    Возвращает:
    Ничего. Функция просто выводит текст на экран.
    """
    try:
        with open(путь_к_файлу, режим) as файл:
            содержимое = файл.read()
            тип_данных = type(содержимое).__name__
            print(f"Тип данных: {тип_данных}\nСодержимое файла:\n{содержимое.replace(разделитель, конец_строки)}")
    except FileNotFoundError:
        print(f"Файл '{путь_к_файлу}' не найден.")
    except Exception as e:
        print(f"Произошла ошибка: {e}")

def информация_о_типе(переменная):
    """
    Функция для вывода информации о типе переменной.

    Параметры:
    - переменная: Любая переменная, о которой нужно получить информацию о типе.

    Примеры использования:
    - информация_о_типе("Привет, мир!")
        Выводит информацию о типе строки.

    - информация_о_типе(42)
        Выводит информацию о типе целого числа.

    Возвращает:
    Ничего. Функция просто выводит текст на экран.
    """
    тип_данных = type(переменная).__name__
    print(f"Тип данных переменной: {тип_данных}")
